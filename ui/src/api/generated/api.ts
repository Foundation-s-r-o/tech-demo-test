/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface IdResponseDTOLong
 */
export interface IdResponseDTOLong {
    /**
     * 
     * @type {number}
     * @memberof IdResponseDTOLong
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface LoginRequestDTO
 */
export interface LoginRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDTO
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface LogoutRequestDTO
 */
export interface LogoutRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof LogoutRequestDTO
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface PagedResultResponseDTOPersonListItemResponseDTO
 */
export interface PagedResultResponseDTOPersonListItemResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof PagedResultResponseDTOPersonListItemResponseDTO
     */
    'totalElements'?: number;
    /**
     * 
     * @type {Array<PersonListItemResponseDTO>}
     * @memberof PagedResultResponseDTOPersonListItemResponseDTO
     */
    'elements'?: Array<PersonListItemResponseDTO>;
}
/**
 * 
 * @export
 * @interface PersonDetailResponseDTO
 */
export interface PersonDetailResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof PersonDetailResponseDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PersonDetailResponseDTO
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDetailResponseDTO
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDetailResponseDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDetailResponseDTO
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDetailResponseDTO
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonDetailResponseDTO
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface PersonListItemResponseDTO
 */
export interface PersonListItemResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof PersonListItemResponseDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PersonListItemResponseDTO
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonListItemResponseDTO
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonListItemResponseDTO
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface PersonModifyRequestDTO
 */
export interface PersonModifyRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof PersonModifyRequestDTO
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof PersonModifyRequestDTO
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof PersonModifyRequestDTO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof PersonModifyRequestDTO
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof PersonModifyRequestDTO
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonModifyRequestDTO
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface UserResponseDTO
 */
export interface UserResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof UserResponseDTO
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDTO
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseDTO
     */
    'username'?: string;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/currentuser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequestDTO: LoginRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequestDTO' is not null or undefined
            assertParamExists('login', 'loginRequestDTO', loginRequestDTO)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LogoutRequestDTO} logoutRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (logoutRequestDTO: LogoutRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoutRequestDTO' is not null or undefined
            assertParamExists('logout', 'logoutRequestDTO', logoutRequestDTO)
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logoutRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequestDTO: LoginRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LogoutRequestDTO} logoutRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(logoutRequestDTO: LogoutRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(logoutRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser(options?: any): AxiosPromise<UserResponseDTO> {
            return localVarFp.currentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequestDTO} loginRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequestDTO: LoginRequestDTO, options?: any): AxiosPromise<UserResponseDTO> {
            return localVarFp.login(loginRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LogoutRequestDTO} logoutRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(logoutRequestDTO: LogoutRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.logout(logoutRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for login operation in AuthControllerApi.
 * @export
 * @interface AuthControllerApiLoginRequest
 */
export interface AuthControllerApiLoginRequest {
    /**
     * 
     * @type {LoginRequestDTO}
     * @memberof AuthControllerApiLogin
     */
    readonly loginRequestDTO: LoginRequestDTO
}

/**
 * Request parameters for logout operation in AuthControllerApi.
 * @export
 * @interface AuthControllerApiLogoutRequest
 */
export interface AuthControllerApiLogoutRequest {
    /**
     * 
     * @type {LogoutRequestDTO}
     * @memberof AuthControllerApiLogout
     */
    readonly logoutRequestDTO: LogoutRequestDTO
}

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public currentUser(options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).currentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthControllerApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(requestParameters: AuthControllerApiLoginRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(requestParameters.loginRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthControllerApiLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public logout(requestParameters: AuthControllerApiLogoutRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).logout(requestParameters.logoutRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PersonControllerApi - axios parameter creator
 * @export
 */
export const PersonControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/persons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PersonModifyRequestDTO} personModifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (personModifyRequestDTO: PersonModifyRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personModifyRequestDTO' is not null or undefined
            assertParamExists('create', 'personModifyRequestDTO', personModifyRequestDTO)
            const localVarPath = `/api/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personModifyRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get', 'id', id)
            const localVarPath = `/api/persons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {string} [email] 
         * @param {number} [pageStart] 
         * @param {number} [pageSize] 
         * @param {'NAME' | 'EMAIL'} [sortBy] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (name?: string, email?: string, pageStart?: number, pageSize?: number, sortBy?: 'NAME' | 'EMAIL', sortDesc?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (pageStart !== undefined) {
                localVarQueryParameter['pageStart'] = pageStart;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDesc !== undefined) {
                localVarQueryParameter['sortDesc'] = sortDesc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PersonModifyRequestDTO} personModifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: number, personModifyRequestDTO: PersonModifyRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'personModifyRequestDTO' is not null or undefined
            assertParamExists('update', 'personModifyRequestDTO', personModifyRequestDTO)
            const localVarPath = `/api/persons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personModifyRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonControllerApi - functional programming interface
 * @export
 */
export const PersonControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PersonModifyRequestDTO} personModifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(personModifyRequestDTO: PersonModifyRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponseDTOLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(personModifyRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonDetailResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {string} [email] 
         * @param {number} [pageStart] 
         * @param {number} [pageSize] 
         * @param {'NAME' | 'EMAIL'} [sortBy] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(name?: string, email?: string, pageStart?: number, pageSize?: number, sortBy?: 'NAME' | 'EMAIL', sortDesc?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResultResponseDTOPersonListItemResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(name, email, pageStart, pageSize, sortBy, sortDesc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PersonModifyRequestDTO} personModifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: number, personModifyRequestDTO: PersonModifyRequestDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, personModifyRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PersonControllerApi - factory interface
 * @export
 */
export const PersonControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp._delete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PersonModifyRequestDTO} personModifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(personModifyRequestDTO: PersonModifyRequestDTO, options?: any): AxiosPromise<IdResponseDTOLong> {
            return localVarFp.create(personModifyRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options?: any): AxiosPromise<PersonDetailResponseDTO> {
            return localVarFp.get(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {string} [email] 
         * @param {number} [pageStart] 
         * @param {number} [pageSize] 
         * @param {'NAME' | 'EMAIL'} [sortBy] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(name?: string, email?: string, pageStart?: number, pageSize?: number, sortBy?: 'NAME' | 'EMAIL', sortDesc?: boolean, options?: any): AxiosPromise<PagedResultResponseDTOPersonListItemResponseDTO> {
            return localVarFp.listUsers(name, email, pageStart, pageSize, sortBy, sortDesc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PersonModifyRequestDTO} personModifyRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: number, personModifyRequestDTO: PersonModifyRequestDTO, options?: any): AxiosPromise<void> {
            return localVarFp.update(id, personModifyRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in PersonControllerApi.
 * @export
 * @interface PersonControllerApiDeleteRequest
 */
export interface PersonControllerApiDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof PersonControllerApiDelete
     */
    readonly id: number
}

/**
 * Request parameters for create operation in PersonControllerApi.
 * @export
 * @interface PersonControllerApiCreateRequest
 */
export interface PersonControllerApiCreateRequest {
    /**
     * 
     * @type {PersonModifyRequestDTO}
     * @memberof PersonControllerApiCreate
     */
    readonly personModifyRequestDTO: PersonModifyRequestDTO
}

/**
 * Request parameters for get operation in PersonControllerApi.
 * @export
 * @interface PersonControllerApiGetRequest
 */
export interface PersonControllerApiGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PersonControllerApiGet
     */
    readonly id: number
}

/**
 * Request parameters for listUsers operation in PersonControllerApi.
 * @export
 * @interface PersonControllerApiListUsersRequest
 */
export interface PersonControllerApiListUsersRequest {
    /**
     * 
     * @type {string}
     * @memberof PersonControllerApiListUsers
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof PersonControllerApiListUsers
     */
    readonly email?: string

    /**
     * 
     * @type {number}
     * @memberof PersonControllerApiListUsers
     */
    readonly pageStart?: number

    /**
     * 
     * @type {number}
     * @memberof PersonControllerApiListUsers
     */
    readonly pageSize?: number

    /**
     * 
     * @type {'NAME' | 'EMAIL'}
     * @memberof PersonControllerApiListUsers
     */
    readonly sortBy?: 'NAME' | 'EMAIL'

    /**
     * 
     * @type {boolean}
     * @memberof PersonControllerApiListUsers
     */
    readonly sortDesc?: boolean
}

/**
 * Request parameters for update operation in PersonControllerApi.
 * @export
 * @interface PersonControllerApiUpdateRequest
 */
export interface PersonControllerApiUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof PersonControllerApiUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PersonModifyRequestDTO}
     * @memberof PersonControllerApiUpdate
     */
    readonly personModifyRequestDTO: PersonModifyRequestDTO
}

/**
 * PersonControllerApi - object-oriented interface
 * @export
 * @class PersonControllerApi
 * @extends {BaseAPI}
 */
export class PersonControllerApi extends BaseAPI {
    /**
     * 
     * @param {PersonControllerApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public _delete(requestParameters: PersonControllerApiDeleteRequest, options?: AxiosRequestConfig) {
        return PersonControllerApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PersonControllerApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public create(requestParameters: PersonControllerApiCreateRequest, options?: AxiosRequestConfig) {
        return PersonControllerApiFp(this.configuration).create(requestParameters.personModifyRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PersonControllerApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public get(requestParameters: PersonControllerApiGetRequest, options?: AxiosRequestConfig) {
        return PersonControllerApiFp(this.configuration).get(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PersonControllerApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public listUsers(requestParameters: PersonControllerApiListUsersRequest = {}, options?: AxiosRequestConfig) {
        return PersonControllerApiFp(this.configuration).listUsers(requestParameters.name, requestParameters.email, requestParameters.pageStart, requestParameters.pageSize, requestParameters.sortBy, requestParameters.sortDesc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PersonControllerApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonControllerApi
     */
    public update(requestParameters: PersonControllerApiUpdateRequest, options?: AxiosRequestConfig) {
        return PersonControllerApiFp(this.configuration).update(requestParameters.id, requestParameters.personModifyRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


